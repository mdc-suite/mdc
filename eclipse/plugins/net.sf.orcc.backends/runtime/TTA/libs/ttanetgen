#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Copyright (c) 2011, IRISA
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
#   * Redistributions of source code must retain the above copyright notice,
#     this list of conditions and the following disclaimer.
#   * Redistributions in binary form must reproduce the above copyright notice,
#     this list of conditions and the following disclaimer in the documentation
#     and/or other materials provided with the distribution.
#   * Neither the name of IRISA nor the names of its
#     contributors may be used to endorse or promote products derived from this
#     software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
# STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
# WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
#
# @author Herve Yviquel


from orcc_ import *
import getopt
import os
import shutil
import sys
import time


def usage():
    print "Open RVC-CAL Compiler - TTA backend"
    print "generate - Software/Hardware Generator for Transport Trigger Architecture"
    print "Usage: generate [options] input_directory"
    print ""
    print "Options:"
    print "-c, --compile=[options]  \t Compile the application from the generated LLVM assembly code into TTA binary"
    print "-d, --debug \t\t\t Debug mode, generate extra files and print additional information"
    print "-g, --generate=[options] \t Generate the VHDL files of the TTA processors"
    print "-p, --profile \t\t\t Generate a text file containing all the results of the profiling (Need to have already the traces of the simulator)"
    print "-s, --simulate=[options] \t Simulate each processor independently from its execution trace"
    print "-a, --analyse=[options] \t Generate files containing a synthesis of the simulation's results (Need to have already the traces of the simulator)"
    print "--jobs=[nb] \t\t\t Number of concurrent jobs launched (only for compile and simulate modes)"
    

def compile(arg, debug, target, nbJobs):
    start = time.time()

    print "*********************************************************************"
    print "* Compile the application for the TTA processors network"
    print "*********************************************************************"

    design.compile(target, libPath, arg.split(), debug, nbJobs)

    print "* Compilation of code for %d processors done in %f seconds." % (len(design.processors), time.time() - start)


def generate(arg, debug, target):
    start = time.time()

    print "*********************************************************************"
    print "* Generate each TTA processors"
    print "*********************************************************************"
    
    design.generate(target, libPath, arg.split(), debug)

    print "* Generation of %d processors done in %f seconds." % (len(design.processors), time.time() - start)


def profile(target):
    design.profile(target)

def simulate(arg, nbJobs, target):
    print "*********************************************************************"
    print "* Simulate the application for the TTA processors network"
    print "*********************************************************************"

    return design.simulate(target, nbJobs, arg.split())
    
def analyse(arg, target):
    design.analyse(target, arg.split())


try:
    opts, args = getopt.getopt(sys.argv[1:], "hcgdpsax:v", ["help", "jobs=", "compile=", "generate=", "profile", "debug", "simulate=", "analyse="])
except getopt.GetoptError, err:
    print str(err)
    usage()
    sys.exit(2)
    
debug = False
nbJobs = 1
actorsKoInSimulation = 0

for o, a in opts:
    if o in ("--jobs"):
        nbJobs = int(a)
    elif o in ("-d", "--debug"):
        debug = True
    elif o in ("-h", "--help"):
        usage()
        sys.exit()

if len(args) == 0:
    sys.exit()

# Get useful path
pathname = os.path.dirname(sys.argv[0])
libPath = os.path.abspath(pathname)
srcPath = os.path.abspath(args[0])
tracePath = os.path.join(srcPath, "trace")
    
sys.path.insert(0, libPath)
sys.path.insert(0, srcPath)

from informations_.informations import *

try:
    for o, a in opts:
        if o in ("-c", "--compile"):
            compile(a, debug, srcPath, nbJobs)
    
    for o, a in opts:
        if o in ("-g", "--generate"):
            generate(a, debug, srcPath)
    
    for o, a in opts:
        if o in ("-s", "--simulate"):
            actorsKoInSimulation = simulate(a, nbJobs, srcPath)
            
    for o, a in opts:
        if o in ("-a", "--analyse"):
            analyse(a, srcPath)

    for o, a in opts:
        if o in ("-p", "--profile"):
            profile(srcPath)

    sys.exit(actorsKoInSimulation)
            
except KeyboardInterrupt:
    print "Abort by user."
    sys.exit(1)

except Exception, err:
    sys.exit("ERROR: %s\n" % str(err))
