package it.diee.unica.alba.actors.common;
import it.diee.unica.alba.common.Constants.H_SIZE;
import it.diee.unica.alba.common.Constants.V_SIZE;

actor ImgCtrl(int DATA_SIZE=32,int ADDR_SIZE=8) int(size=DATA_SIZE) in1, int(size=DATA_SIZE) in2 ==> int(size=ADDR_SIZE) addr_in, int(size=ADDR_SIZE) addr_out, int(size=DATA_SIZE) out1, int(size=DATA_SIZE) out2, int(size=DATA_SIZE) out3, int(size=DATA_SIZE) out4 :
	
	int(size=DATA_SIZE) maxCode := 0;
	
	uint(size=ADDR_SIZE) row := 0;
	uint(size=ADDR_SIZE) column := 0;
	uint(size=2) idx := 0;

	uint(size=ADDR_SIZE) h_size := H_SIZE;
	uint(size=ADDR_SIZE) v_size := V_SIZE;
	
	bool sentData := false;
	bool endStore := false;
	bool readedMaxCode := false;
	

	saveMaxCode: action in1:[a] ==> addr_in:[address], out4:[a]
	guard not endStore and not readedMaxCode
	var uint(size=ADDR_SIZE) address
	do
		address := h_size*v_size*3;
		maxCode := a;
		readedMaxCode:=true;
	end

	genAddr: action in1:[a] ==> addr_in:[address]
	guard not endStore
	var uint(size=ADDR_SIZE) address
	do
		address := row*h_size*3 + column*3 + idx;
		//println("saving " + a + " on address " + address);
		if idx < 2 then
			idx := idx + 1;
		else if column < (h_size-1) then
				column := column + 1;
				idx := 0;
			else if row < (v_size-1) then
					row := row + 1;
					column := 0;
					idx := 0;
				else
					idx := 0;
					row := 0;
					column := 0;
					endStore := true;
				end
			end
		end
	end
	
	sendData: action ==> addr_out:[address]
	guard endStore and not sentData
	var uint(size=ADDR_SIZE) address
	do
		address := row*h_size*3 + column*3 + idx;
		//println("reading address " + address);
		if idx < 2 then
			idx := idx + 1;
		else if column < (h_size-1) then
				column := column + 1;
				idx := 0;
			else if row < (v_size-1) then
					row := row + 1;
					column := 0;
					idx := 0;
				else
					idx := 0;
					row := 0;
					column := 0;
					endStore := false;
					readedMaxCode := false;
				end
			end
		end
		sentData := true;
	end
	
	recvDataR: action in2:[data] ==> out1:[data]
	guard sentData and idx=1
	do
		//println("forward R data " + data);
		sentData := false;
	end
	
	recvDataG: action in2:[data] ==> out2:[data]
	guard sentData and idx=2
	do
		//println("forward G data " + data);
		sentData := false;
	end
	
	recvDataB: action in2:[data] ==> out3:[data], out4:[offset]
	guard sentData and idx=0
	var int(size=DATA_SIZE) offset
	do
		//println("forward B data " + data);
		offset := maxCode;
		sentData := false;
	end
	
end