package it.diee.unica.alba.actors;

actor Qsort(int DATA_SIZE=16,int ADDR_SIZE=5) int(size=DATA_SIZE) in1, int(size=2*DATA_SIZE+2*(ADDR_SIZE+1)) value ==> int(size=DATA_SIZE) out, int(size=DATA_SIZE) result :

	// ADDR_SIZE = ADDR_SIZE (del MinMax) -1
	int(size=DATA_SIZE) vector [1<<(ADDR_SIZE)];
	uint(size=ADDR_SIZE+1) idx := 0;
	uint(size=ADDR_SIZE) n_iter := 0;
	uint(size=ADDR_SIZE) sizeV := 0;
	bool endRecv := false;
	bool sentSize := false;
	bool minUpdated := false;
	bool hasSize := false;
	
	int(size=DATA_SIZE) min:=0;
	int(size=DATA_SIZE) max:=0;
	uint(size=ADDR_SIZE+1) min_idx := 0;
	uint(size=ADDR_SIZE+1) max_idx := 0;
	
	recvSize: action in1:[a] ==> 
	guard not hasSize
	do
		//println("received size " + a);
		sizeV := a;
		hasSize := true;
	end
	
	storeData: action in1:[a] ==> 
	guard hasSize
	do
		vector[idx] := a;
		idx := idx + 1;
	end
	
	endReceive: action ==>
	guard hasSize and idx=sizeV and not endRecv
	do
		//println("end recv");
		endRecv := true;
		idx := 0;	
	end
	
	sendSize: action ==> out:[vecSize]
	guard endRecv and not sentSize and n_iter < sizeV/2
	var int(size=DATA_SIZE) vecSize
	do
		vecSize := (sizeV - 2*n_iter);
		sentSize := true;
	end
	
	sendToCompare: action  ==> out:[a]
	guard endRecv && sentSize && idx < (sizeV-n_iter) && n_iter < sizeV/2
	var int(size=DATA_SIZE) a
	do		
		//println("vector[" + idx + "] = " + vector[idx]);
		a :=vector[idx];
		idx := idx + 1;
	end
	
	updateVect: action value:[value] ==>
	guard n_iter < sizeV/2
	do
		//println("res=" + value );
		readValues(value);
		
		//if(n_iter=11) then
		//	println(n_iter + " iter: evaluated min " + min + "(idx " + min_idx + ") max " + max +"(idx " + max_idx + " soglia " + ((1<<ADDR_SIZE)-2*n_iter) +")");
		//end
		
		if min_idx != 0 then updateMin();
		end
		
		//if not (minUpdated && (n_iter = sizeV/2-1)) then
			if max_idx != (sizeV-1-2*n_iter) then updateMax();
			end
		//end
		
		n_iter := n_iter + 1;
		
		if n_iter = sizeV/2 then idx := 0;
		else
			idx := n_iter;
		end
		
		minUpdated := false;
		sentSize := false;
		
	end
		
	sendResult: action  ==> result:[a]
	guard  n_iter = sizeV/2 and idx < sizeV
	var int(size=DATA_SIZE) a
	do
		a := vector[idx];
		idx := idx +1;
		//println("sent size" + sentSize + " endRecv " + endRecv);
	end
	
	reinitVar: action  ==> 
	guard  n_iter = sizeV/2 and endRecv and idx = sizeV
	do
		initializeVars();
	end
	
	procedure initializeVars() 
 	begin 
 		idx := 0;
		n_iter := 0;
		endRecv := false;
		sentSize := false;
		hasSize := false;
	end
	
	procedure readValues(int(size=2*(ADDR_SIZE+1)+2*DATA_SIZE) value) 
 	begin 
 		min := value>>(2*(ADDR_SIZE+1));
  		max := value>>(2*(ADDR_SIZE+1)+DATA_SIZE);
  		min_idx := value;
  		max_idx := value>>(ADDR_SIZE+1);
	end
	
	procedure updateMin() 
	var int(size=DATA_SIZE) tmp
	begin
		//println("updating min " + min + ":" + (n_iter + min_idx) + " <--> " + n_iter);
		tmp := vector[n_iter];
		vector[n_iter] := min;
		vector[n_iter + min_idx] := tmp; 
		minUpdated := true;
	end
	
	procedure updateMax() 
	var int(size=DATA_SIZE) tmp
	begin
		//println("updating max " + max + ": " +  (n_iter + max_idx) + "<-->" + (sizeV-1 - n_iter));
		if max_idx = 0 and minUpdated then
			tmp := vector[sizeV-1 - n_iter];
			vector[sizeV-1 - n_iter] := max;
			vector[n_iter + min_idx] := tmp;
		else
			tmp := vector[sizeV-1 - n_iter];
			vector[sizeV-1 - n_iter] := max;
			vector[n_iter + max_idx] := tmp; 
		end
	end
	
end
