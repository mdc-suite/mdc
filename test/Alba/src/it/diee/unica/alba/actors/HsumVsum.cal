package it.diee.unica.alba.actors;

actor HsumVsum(int DATA_SIZE=32) int(size=DATA_SIZE) in1, int(size=DATA_SIZE) in2 ==>  int(size=DATA_SIZE) out :

	int(size=DATA_SIZE) hsum := 0;
	int(size=DATA_SIZE) vsum := 0; 
	
	uint(size=2) hiter := 0;
	uint(size=2) viter := 0;
	
	bool evH := false;
	bool evV := false;
	bool endSbw := false;
	
	int(size=DATA_SIZE) res := 1;

	recvHsum: action in1:[a] ==>
	guard not evH
	do
		//println("recv hsum" + a);
		hsum := hsum + a;
		//println("upd hsum " + hsum);
		evH := true;
	end

	recvVsum: action in2:[a] ==>
	guard not evV
	do
		//println("recv vsum " + a);
		vsum := vsum + a;
		//println("upd vsum " + vsum);
		evV := true;
	end
	
	evalH: action ==>
	guard evH
	do
		if(hsum>1) then
			//println("res0");
			res := 0;
		end
		if hiter < 3 then
			hiter := hiter + 1;
		end
		evH := false;
		hsum := 0;
	end
	
	evalV: action ==>
	guard evV
	do
		if(vsum>1) then
			//println("res0");
			res := 0;
		end
		if viter < 3 then
			viter := viter + 1;
		end
		vsum := 0;
		evV := false;
	end
	
	evaluate: action  ==> out:[res]
	guard (hiter = 3) and (viter = 3) and not evV and not evH and not endSbw
	do
		//println("ending");
		hiter := 0;
		viter := 0;
		hsum := 0;
		vsum := 0;
		endSbw := true;
	end
	
	ending: action ==>
	guard endSbw
	do
		res := 1;
		endSbw := false;
	end

end