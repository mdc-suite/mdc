package it.diee.unica.alba.actors.common;
import it.diee.unica.alba.common.Constants.H_SIZE;
import it.diee.unica.alba.common.Constants.V_SIZE;

actor MaxColorPrint(int DATA_SIZE=32,int ADDR_SIZE=8) int(size=DATA_SIZE) in1, int(size=DATA_SIZE) in2, int(size=DATA_SIZE) in3, int(size=DATA_SIZE) in4 ==> int(size=DATA_SIZE) out :
	
	int(size=DATA_SIZE) maxCode := 0;
	
	uint(size=ADDR_SIZE) row := 0;
	uint(size=ADDR_SIZE) column := 0;
	uint(size=2) idx := 0;

	uint(size=ADDR_SIZE) h_size := H_SIZE;
	uint(size=ADDR_SIZE) v_size := H_SIZE;
	
	bool endConv := false;
	
	
	acquireMaxColor: action in4:[data] ==>
	do
		maxCode := data;
	end
	
	acquireDataY: action in1:[ny] ==> out:[res]
	var int(size=DATA_SIZE) res
	do	
		println("received Y " + ny);
		if ny<maxCode then
			if ny>=0 then
				res := ny;
			else
				res := 0;
			end
		else
			res := maxCode;
		end
		updateIndex();
	end
	
	acquireDataCb: action in2:[ncb] ==> out:[res]
	var int(size=DATA_SIZE) res
	do
		println("received Cr " + ncb);
		if ncb<maxCode then
			if ncb>=0 then
				res := ncb;
			else
				res := 0;
			end
		else
			res := maxCode;
		end
		updateIndex();
	end
	
	acquireDataCr: action in3:[ncr] ==> out:[res]
	var int(size=DATA_SIZE) res
	do
		println("received Cb " + ncr);
		if ncr<maxCode then
			if ncr>=0 then
				res := ncr;
			else
				res := 0;
			end
		else
			res := maxCode;
		end
		updateIndex();
	end
	
	
	procedure updateIndex()
	begin
		if idx < 2 then
			idx := idx + 1;
		else if column < (h_size-1) then
				column := column + 1;
				idx := 0;
			else if row < (v_size-1) then
					row := row + 1;
					column := 0;
					idx := 0;
				else
					idx := 0;
					row := 0;
					column := 0;
					endConv := true;
				end
			end
		end
	end
	
	finalize: action  ==>
	guard endConv
	do
		endConv := false;
	end
	
	schedule fsm init:
		init (acquireMaxColor) --> waitNy;
		waitNy (acquireDataY) --> waitNcb;
		waitNy (finalize) --> init;
		waitNcb (acquireDataCb) --> waitNcr;
		waitNcr (acquireDataCr) --> waitNy;
	end
	
end