package it.diee.unica.alba.actors;

actor Cubic(int DATA_SIZE=32,int ADDR_SIZE=8) int(size=DATA_SIZE) in1, int(size=DATA_SIZE) in2, int(size=DATA_SIZE) in3 ==> int(size=ADDR_SIZE) addr_in, int(size=ADDR_SIZE) addr_out, int(size=DATA_SIZE) out1, int(size=DATA_SIZE) out2, int(size=DATA_SIZE) out3, int(size=DATA_SIZE) out4:
	
	int(size=DATA_SIZE) sum := 0;
	int(size=DATA_SIZE) mask[16]=[1,-9,-9,1,-9,81,81,-9,-9,
		81,81,-9,1,-9,-9,1];
	
	uint(size=4) address := 0;

	bool endSend := false;
	bool doneData := true;
	bool doneSave := false;
	bool updateSum := false;
	
	genAddr: action in1:[a] ==> addr_in:[addr]
	guard not doneSave
	var uint(size=4) addr
	do		
		sum := 0;
		addr := address;
		//println("saving " + a + " on address " + addr);
		if address < 15 then
			address := address + 1;
		else
			//println("end save"); 
			address := 0;
			doneSave := true;
		end
	end
	
	
	readData: action  ==> addr_out:[address]
	guard not endSend and doneData and doneSave
	do	
		//println("read data addr " + address);	
		
		doneData := false;

	end
	
	recvNext: action in2:[data] ==> out1:[mulMask], out2:[data], out3:[sum]
	guard doneSave and not doneData and not updateSum
	var uint(size=4) addr,
		int(size=DATA_SIZE) mulMask
	do
		addr := address;
		//println("recv " +  data + " from addr " + addr);
		mulMask := mask[addr];
		if address < 15 then
			address := address+1;
		else 
			address := 0;
			endSend := true;
		end
		updateSum := true;
	end
	
	updSum: action in3:[partialSum] ==> 
	guard updateSum
	do
		
		//println("upd sum " + partialSum );
		sum := partialSum;
		updateSum := false;
		doneData := true;
	end
	
	endCubic: action  ==> out4:[sum]
	guard endSend and doneData	
	do
		//println("done sum");
		doneSave := false;
		endSend := false;
		updateSum := false;		
	end

	

end